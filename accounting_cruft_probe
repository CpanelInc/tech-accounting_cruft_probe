#!/bin/sh
eval 'if [ -x /usr/local/cpanel/3rdparty/bin/perl ]; then exec /usr/local/cpanel/3rdparty/bin/perl -x -- $0 ${1+"$@"}; else exec /usr/bin/perl -x $0 ${1+"$@"}; fi;'
if 0;

#!/usr/local/cpanel/3rdparty/bin/perl

# accounting cruft probe

# script to check for remnants of a deleted account, subdomain, addon, parked domain
# on a cPanel server

# Copyright(c) 2013 cPanel, Inc.
# All rights Reserved.
# copyright@cpanel.net
# http://cpanel.net
# Unauthorized copying is prohibited

# maintained by: Blaine Motsinger
# Modified 7/15/2014 - Peter Elsner (added check option even if account is listed as active)
# Modified 9/03/2014 - Peter Elsner (fixed shebang line in preparation for Perl 5.14.4 (cp11.46)
# Modified 5/13/2015 - Peter Elsner (added grep for username to catch when a user name was
#                      changed via Modify An Account in WHM - Thanks to Marco.


BEGIN {unshift @INC, '/usr/local/cpanel';}

use strict;
use warnings;

my $version = '2.1.14';

use File::Find;
use Cpanel::MysqlUtils;
use Getopt::Long;
my ($account, $subaddonparked, $help, $manual);
GetOptions ("account=s" => \$account,
            "subaddonparked=s" => \$subaddonparked,
            "manual=s" => \$manual,
            "help" => \$help);

print_intro() && print_help() && exit_0() unless ($account or $subaddonparked or $manual);

my ($username, $domain, $termination_date, $check_for, @userdata_files, @results, $tcDomain, $tcUsername, @USERDOMAINS, $userdomainline, $NOTFOUND);
my $is_active = 0;


### initial and input processing
initial_checks();
process_options();  # the route through the script is determined by switches and input


### subs
sub print_intro {
    print "accounting_cruft_probe\n" .
          "version $version\n\n";
}

sub print_help {
    print "script to check for remnants of a:\n" .
          "deleted account, subdomain, addon, parked domain\n" .
          "on a cPanel server\n\n" .
          "usage:\n" .
          "./accounting_cruft_probe\n\n" .
          "-h --help\n" .
          "\tdisplays this dialogue\n\n" .
          "-a --account [username|domain.tld]\n" .
          "\tcheck for account level cruft\n\n" .
          "-s --subaddonparked [domain.tld|sub.domain.tld]\n" .
          "\tcheck for sub|addon|parked domain cruft\n\n" .
          "-m --manual [domain.tld|sub.domain.tld]\n" .
          "\tmanually check through directories and files\n";
}

sub exit_0 {
    print "\n\n";
    exit 0;
}

sub initial_checks {
    my $login = (getpwuid $>);
    if ($login ne 'root') {
        print "accounting_cruft_probe must be run as root\n";
        exit_0();
    }
    chomp (my $os = `uname`);
    if ($os eq 'FreeBSD') {  # since reasonably, this is the only other thing that will show up in uname for supported OSs, no need to expand this to more checks, yet 
        print "accounting_cruft_probe does not support FreeBSD at this time\n";
        exit_0();
    }
}

sub process_options {
    if ($account) {
        if ($account =~ /\./) {
            $domain = lc($account);  # accounts cannot contain periods
        } else {
            $username = lc($account);
        }
        print_intro();  # [todo] move this section out to not have double placement
        check_account_active();
    }
    if ($subaddonparked) {
        if ($subaddonparked !~ /\./) {  # [todo] investigate error checking within Getopt::long; expand regex to be more specific
            print "Option sub must be a fully qualified domain name\n";  # modify this to accurately give error
            print_intro() && print_help() && exit_0();
        } else {
            $domain = lc($subaddonparked); 
        }
        print_intro();
        check_subaddonparked_active();
    }
    if ($manual) {
        if ($manual !~ /\./) {
            print "Option sub must be a fully qualified domain name\n";
            print_intro() && print_help() && exit_0();
        } else {
            $domain = lc($manual);
        }
        print_intro();
        print_disclaimer();
        ask_to_advance();
    }
}

sub check_account_active {
    my $accounting_log = '/var/cpanel/accounting.log';
    my $is_account;
    $is_account = 0;
    my @temp;

    if (defined $username) {
        $check_for = ':' . $username . '$';
    } else {
        $check_for = ':' . $domain . ':';
    }

    open (my $fh, '<', $accounting_log)
        or die "unable to open $accounting_log\n\n";
        foreach (<$fh>) {
            if (/$check_for/) {
                $is_account = 1;
                # set the other variable not passed in
                if (!defined $username) {
                    @temp = split (/:/);
                    chomp ($username = $temp[-1]);
                }
                if (!defined $domain) {
                    my @temp = split(/:/);
                    chomp ($domain = $temp[-3]);
                }
                # decide if active or not
                if (/CREATE/) {
                    $is_active = 1;
                }
                if (/REMOVE/) {
                    $is_active = 0;
                    @temp = ();
                    @temp = split (/:/);
                    $termination_date = "$temp[0]:$temp[1]:$temp[2]";  # set the termination date
                }
            }
        }
    close $fh;

    # If the user name was changed via Modify An Account, then the cruft check would
    # not find anything because it would look only in /var/log/accounting.log.
	# which is not updated when a username is changed.  
    # Thanks to Marco for reporting this.  - PSE
	open(USERDOMAINS,"/etc/userdomains");
	@USERDOMAINS=<USERDOMAINS>;
	close(USERDOMAINS);
	
	foreach $userdomainline(@USERDOMAINS) { 
		chomp($userdomainline);
		($tcDomain,$tcUsername)=(split(/: /,$userdomainline));
		if ($tcUsername =~ m/nobody/) { 
			$NOTFOUND=1;
			last;
		}
		if ($tcUsername eq $username) { 
			last;
		}
	}
	if ($NOTFOUND) { 
		$tcDomain = "";
		$tcUsername = "";
	}

    if ($tcDomain) { 
      $domain = $tcDomain;
	  $is_active = 1;
    }
    if ($tcUsername) { 
      $username = $tcUsername;
	  $is_active = 1;
    }

    print "according to $accounting_log\n";
    if (defined $username and !defined $domain) {  # the check will gather both of the variables from the accounting.log, if the account has been on the server
        print "$username has never been an active account\n";
        exit_0();
    }
    if (defined $domain and !defined $username) {
        print "$domain has never been an active account\n";  # [todo] combine this and last, stripping the check_for variable
        exit_0();
    }
    if ($is_active == 1) {
        print "$domain ($username) is still an active account\n";
        # here we should ask if they wish to continue checking?  If yes, continue, if no exit.
        # Peter Elsner - 7/15/2014
        print "Continue checking for cruft (Y/n): ";
        my $Continue=<STDIN>;
        chomp($Continue);
        if (!($Continue)) { 
		$Continue = "Y"; 
	}
        $Continue=uc(substr($Continue,0,1));  ## Grab only the first character and uppercase it
        if ($Continue ne "Y") { 
           print "Checking stopped!\n";
           exit_0();
        }
        check_cruft();
        print_results();
        exit_0();
    }
    if ($is_account == 1 and $is_active == 0) {
        print "$domain ($username) was terminated on $termination_date\n";
        check_cruft();
        print_results();
        exit_0();
    }
}

sub ask_to_advance {
    print '[press enter to continue] ';
    my $input = <STDIN>;
    check_cruft();
    print_results();
    exit_0;
}


## cruft checks
sub check_cruft {
    if ($account) {
        check_user_exists();
        check_homedir_exists();
        check_userdomains();
        check_userdata();
        check_userdata_files();
        check_httpd_conf();
        check_zones();
        check_mysql();
        check_dnsonly();
    }
    if ($subaddonparked) {
        check_userdomains();
        check_userdata_files();
        check_users_files();
        check_httpd_conf();
        check_zones();
        check_dnsonly();
    }
    if ($manual) {
        search("$domain", '/etc/*');
        search("$domain", '/var/named/*');
        search("$domain", '/var/cpanel/users/*');
        search("$domain", '/var/cpanel/userdata/*/*');
        search("$domain", '/usr/local/apache/conf/*');
    }
}

# account level checks
sub check_user_exists {
    if (getpwnam $username) {
       push (@results, ("system user is present - $username; remove with userdel"));
    }
}

sub check_homedir_exists {
    my $wwwacct_conf = '/etc/wwwacct.conf';
    my $homedir;
    open (my $fh, '<', $wwwacct_conf)  # use HOMEDIR in wwwacct.conf
        or warn "unable to open $wwwacct_conf\n";
        foreach (<$fh>) {
            if (/HOMEDIR/) {
                $_ =~ s/HOMEDIR \///;
                chomp ($_);
                $homedir = "\/$_\/$username";
            }
        }
    close $fh;
    if (-d $homedir) {
        push (@results, ('homedir - ' . $homedir));
    }
    if ($homedir ne "\/home\/$username") {  # if the HOMEDIR setting isn't the traditional /home/$account
        if (-d "/home/$username") {  # also check if the homedir is in the normal home
            push (@results, ('homedir - ' . "/home/$username"));
        }
    }
}

sub check_userdomains {
    my @files = qw(/etc/userdomains /etc/userdatadomains /etc/trueuserdomains);
    foreach my $file (@files) {
        open(my $FH, '<', $file)
            or warn "could not open $file\n";
            foreach (<$FH>) {
                if (/^$domain/) {
                    push (@results, $file);
                }
            }
        close $FH;
    }
}

sub check_userdata {
    my @directories = qw(/var/cpanel/users /var/cpanel/userdata);
    find (\&locations_search_for, @directories);
    sub locations_search_for {
        if (/^$username$/) {
            push (@results, $File::Find::name);
        }
    }
}

sub check_userdata_files {
    finddepth (\&build_userdata_files, '/var/cpanel/userdata');
    sub build_userdata_files {
        push (@userdata_files, $File::Find::name);  # build an array with all userdata files
    }
    foreach my $userdata_file (@userdata_files) {
        open (my $fh, '<', $userdata_file)
            or warn "could not open $userdata_file\n";
            foreach (<$fh>) {
                if (/ $domain/ and ($_ !~ /serveradmin/)) {
                    push (@results, $userdata_file);
                }
            }
        close $fh;
    }
}

sub check_httpd_conf {
    my $httpd_conf = '/usr/local/apache/conf/httpd.conf';
    open (my $fh, '<', $httpd_conf)
        or warn "could not open $httpd_conf\n";
        foreach (<$fh>) {
            if (/ServerName $domain/) {
                push (@results, "$httpd_conf - ServerName entry");
            }
            if (/ServerAlias/) {
                if (/ $domain/ || / www.$domain/) {
                    push (@results, "$httpd_conf - ServerAlias entry");
                }
            }
        }
    close $fh;
}

sub check_zones {
    my $named_conf = '/etc/named.conf';
    open (my $fh, '<', $named_conf)
        or warn "could not open $named_conf\n";
        foreach (<$fh>) {
            if (/^zone "$domain/) {
                push (@results, $named_conf);
                last;
            }
        }
    close $fh;
    my @zones_dir = qw(/var/named);
    find (\&search_for, @zones_dir);
    sub search_for {
        if (/^$domain/) {
            push (@results, $File::Find::name);
        }
    }
}

sub check_mysql {
    my $check_mysql_users = Cpanel::MysqlUtils::sqlcmd("SELECT User from mysql.user WHERE User REGEXP \"^$account\$\"");
    if ($check_mysql_users =~ /^ERROR/) {
        print "$check_mysql_users\n";
        last;
    }
    my @mysql_users = split ("\n", "$check_mysql_users");
    if (@mysql_users) {
        my %hash = map {$_, 1} @mysql_users;
        @mysql_users = keys %hash;
        foreach (@mysql_users) {
            push (@results, ('MySQL user - ' . $_));
        }
    }
    my $var_cpanel_databases_users = '/var/cpanel/databases/users.db';
    open (my $fh, '<', $var_cpanel_databases_users)
        or warn "could not open $var_cpanel_databases_users\n";
        foreach (<$fh>) {
            if (/$account/) {
                push (@results, $var_cpanel_databases_users);
                last;
            }
        }
    close $fh;
}

sub check_dnsonly {
    # check for dns clustering
    if (-e '/var/cpanel/useclusteringdns') {
        push (@results, 'DNS Clustering is enabled; zones may persist in the cluster');
    }
}

# subaddonparked checks
sub check_subaddonparked_active {
    my ($users_file, @users_files);
    opendir (my $dh, '/var/cpanel/users')
        or warn "could not open /var/cpanel/users\n";
        while ($users_file = readdir($dh)) {
            if ($users_file =~ '.' ) {  # if '.', '..', or .whatever; account names cannot have periods
                next;  # ignore and move on
            }
            push (@users_files, "/var/cpanel/users/$users_file");
        }
    closedir $dh;
    undef $users_file;
    foreach my $users_file (@users_files) {
        open (my $fh, '<', $users_file)
            or warn "could not open $users_file\n";
            foreach (<$fh>) {
                if (/\d+=$domain/) {
                    my @temp = split ('/', $users_file);
                    chomp ($username = $temp[-1]);  # set username from users file
                    if (/DNS/) {
                        $is_active = 1;
                    }
                    if (/XDNS/) {
                        $is_active = 0;
                    }
                    last;
                }
            }
        close $fh;
    }

    print "according to /var/cpanel/users/*\n";
    if ($is_active == 1) {
        print "$domain is still active under $username\n";
        exit_0();
    }
    if ($is_active == 0 and !defined $username) {
        print "$domain has never been a subaddonparked domain\n";
        exit_0();
    }
    if ($is_active == 0 and defined $username) {
        print "$domain is no longer active under account $username\n";
        #ask_to_advance();
        check_cruft();
        print_results();
        exit_0;
    }
}

sub check_users_files {  # yes, having double code in here from earlier, attempting to sort an issue; will shorten later
    my ($users_file, @users_files);
    opendir (my $dh, '/var/cpanel/users')
        or warn "could not open /var/cpanel/users\n";
        while ($users_file = readdir($dh)) {
            if ($users_file eq '.' || $users_file eq '..') {  # if the listing is a . or ..
                next;  # ignore and move on
            }
            push (@users_files, "/var/cpanel/users/$users_file");  # build array of users files
        }
    closedir $dh;
    undef $users_file;
    foreach my $users_file (@users_files) {
        open (my $fh, '<', $users_file)
            or warn "could not open $users_file\n";
            foreach (<$fh>) {
                if (/\d+=$domain/) {
                    if (/XDNS/) {
                        last;
                    } else {
                        push (@results, $users_file);
                        last;
                    }
                }
            }
        close $fh;
    }
}

## manual checks
sub print_disclaimer {
    print "please be aware that manual mode contains no checks if the domain is active on the server.\n" .
          "it simply performs a (loose) grep through directories, then returns the filename of a match.\n" .
          "please use this feature with knowledge of checking if the domain is active or not, as well as verifying the entry in the file.\n\n";
}

sub search {
    if (@_ != 2) {print "WARNING! &search needs two arguments\n"; return -1;}
    chomp (my @temp = `grep $_[0] $_[1]|grep -v ',v:'|grep -v 'Binary'|cut -d':' -f1`);
    my %hash = map {$_, 1} @temp;
    @temp = keys %hash;
    foreach (@temp) {
        push (@results, $_);
    }
}


## results
sub print_results {
    print "\nresults:\n";
    if (scalar (@results) == 0) {
        print "nothing was found\n";
    } else {
        foreach (@results) {
            print "$_\n";
        }
    }
}
